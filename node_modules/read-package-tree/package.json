{
  "name": "read-package-tree",
  "version": "2.2.0",
  "description": "Read the contents of node_modules.",
  "main": "rpt.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "debuglog": "^1.0.1",
    "once": "^1.3.0",
    "dezalgo": "^1.0.0",
    "read-package-json": "^1.2.6",
    "readdir-scoped-modules": "^1.0.0"
  },
  "devDependencies": {
    "tap": "^0.4.12",
    "archy": "0"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/npm/read-package-tree"
  },
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/npm/read-package-tree/issues"
  },
  "homepage": "https://github.com/npm/read-package-tree",
  "readme": "# read-package-tree\n\nRead the contents of node_modules.\n\n## USAGE\n\n```javascript\nvar rpt = require ('read-package-tree')\nrpt('/path/to/pkg/root', function (er, data) {\n  // er means that something didn't work.\n  // data is a structure like:\n  // {\n  //   package: <package.json data, or null>\n  //   children: [ <more things like this> ]\n  //   parent: <thing that has this in its children property, or null>\n  //   path: <path loaded>\n  //   realpath: <the real path on disk>\n  //   target: <if a Link, then this is the actual Node>\n  // }\n})\n```\n\nThat's it.  It doesn't figure out if dependencies are met, it doesn't\nmutate package.json data objects (beyond what\n[read-package-json](http://npm.im/read-package-json) already does), it\ndoesn't limit its search to include/exclude `devDependencies`, or\nanything else.\n\nJust follows the links in the `node_modules` heirarchy and reads the\npackage.json files it finds therein.\n\n## Symbolic Links\n\nWhen there are symlinks to packages in the `node_modules` hierarchy, a\n`Link` object will be created, with a `target` that is a `Node`\nobject.\n\nFor the most part, you can treat `Link` objects just the same as\n`Node` objects.  But if your tree-walking program needs to treat\nsymlinks differently from normal folders, then make sure to check the\nobject.\n\nIn a given `read-package-tree` run, a specific `path` will always\ncorrespond to a single object, and a specific `realpath` will always\ncorrespond to a single `Node` object.  This means that you may not be\nable to pass the resulting data object to `JSON.stringify`, because it\nmay contain cycles.\n",
  "readmeFilename": "README.md",
  "gitHead": "e8806e9035ddb079f10d705b77d29d285bbfc0b4",
  "_id": "read-package-tree@2.2.0",
  "_shasum": "826e75ec32d0697a602e709d874bc0205296428d",
  "_from": "read-package-tree@2.2.0"
}
